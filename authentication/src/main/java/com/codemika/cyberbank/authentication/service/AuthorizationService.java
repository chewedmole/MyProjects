package com.codemika.cyberbank.authentication.service;

import com.codemika.cyberbank.authentication.dto.RqCreateUser;
import com.codemika.cyberbank.authentication.dto.RsInfoUser;
import com.codemika.cyberbank.authentication.entity.RoleEntity;
import com.codemika.cyberbank.authentication.entity.RoleUserEntity;
import com.codemika.cyberbank.authentication.entity.UserEntity;
import com.codemika.cyberbank.authentication.repository.RoleRepository;
import com.codemika.cyberbank.authentication.repository.RoleUserRepository;
import com.codemika.cyberbank.authentication.repository.UserRepository;
import com.codemika.cyberbank.authentication.util.JwtUtil;
import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import lombok.Data;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import java.util.Optional;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 */

@Data
@Service
public class AuthorizationService {
    private final UserRepository userRepository;
    private final RoleRepository roleRepository;
    private final RoleUserRepository roleUserRepository;
    private final JwtUtil jwtUtil;
    private boolean check = false; // –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    private ResponseEntity<?> errorMessage; // —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏

    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     *
     * @param rq –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @return —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
     */
    public ResponseEntity<?> registration(RqCreateUser rq) {
        if (!check) {
            return errorMessage;
        }

        UserEntity newUser = new UserEntity()
                .setName(rq.getName())
                .setSurname(rq.getSurname())
                .setPatronymic(rq.getPatronymic())
                .setEmail(rq.getEmail())
                .setPhone(rq.getPhone())
                .setPassword(rq.getPassword());

        Optional<RoleEntity> role = roleRepository.findByRole("USER");

        if (!role.isPresent()) {
            return ResponseEntity.badRequest().body("–î–∞–Ω–Ω–∞—è —Ä–æ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
        }

        userRepository.save(newUser);

        RoleUserEntity roleUser = new RoleUserEntity()
                .setUser(newUser)
                .setRole(role.get());

        roleUserRepository.save(roleUser);

        Claims claims = Jwts.claims();
        claims.put("id", newUser.getId());
        claims.put("name", newUser.getName());
        claims.put("surname", newUser.getSurname());
        claims.put("patronymic", newUser.getPatronymic());
        claims.put("email", newUser.getEmail());
        claims.put("phone", newUser.getPhone());
        claims.put("role", "USER");

        return ResponseEntity
                .status(HttpStatus.ACCEPTED)
                .body("–£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è! –í–∞—à —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ª–∏—á–Ω–æ—Å—Ç–∏: " + jwtUtil.generateToken(claims));
    }

    /**
     * –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É
     *
     * @param token —Ç–æ–∫–µ–Ω
     * @return –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
     */
    public ResponseEntity<?> login(String token) {
        if (!jwtUtil.validateToken(token)) {
            return ResponseEntity
                    .status(HttpStatus.BAD_REQUEST)
                    .body("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω!");
        }

        Claims claims = jwtUtil.getClaims(token);

        if (jwtUtil.getClaims(token).get("role", String.class) == null){
            claims.put("role", "USER");
        }

        String name = claims.get("name", String.class);
        String surname = claims.get("surname", String.class);
        String patronymic = claims.get("patronymic", String.class);
        String email = claims.get("email", String.class);
        String phone = claims.get("phone", String.class);

        //TODO: –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—ã, –∫—Ä–µ–¥–∏—Ç—ã –∏ —Ç.–¥.
        String result = String.format("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, %s %s %s!\n" +
                "–í–∞—à–∞ —ç–ª. –ø–æ—á—Ç–∞: %s\n" +
                "–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: %s\n" +
                //"–í–∞—à–∏ –∫–∞—Ä—Ç—ã: \n" +
                "–í–∞—à –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω: ", surname, name, patronymic, email, phone) + jwtUtil.generateToken(claims);

        return ResponseEntity
                .status(HttpStatus.OK)
                .body(result);
    }

    /**
     * –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å–∞–π—Ç–µ
     *
     * @return –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–∞—à–µ–≥–æ –±–∞–Ω–∫–∞
     */
    public ResponseEntity<?> getAllUsers() {
        if (userRepository.findAll().isEmpty())
            return ResponseEntity
                    .status(HttpStatus.ACCEPTED)
                    .body("–£ –Ω–∞—Å –µ—â—ë –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è... –•–æ—Ç–∏—Ç–µ —Å—Ç–∞—Ç—å –ø–µ—Ä–≤—ã–º?ü•∫");

        return ResponseEntity
                .status(HttpStatus.ACCEPTED)
                .body(userRepository.findAll());
    }

    /**
     * –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ id (—Ç–æ–ª—å–∫–æ –¥–ª—è –º–æ–¥–µ—Ä–æ–≤)
     *
     * @param id –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @return –∏—Å–∫–æ–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public ResponseEntity<?> getUserById(Long id) {
        if (!userRepository.findById(id).isPresent())
            return ResponseEntity
                    .status(HttpStatus.ACCEPTED)
                    .body("–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!");

        return ResponseEntity
                .status(HttpStatus.ACCEPTED)
                .body(userRepository.findById(id));
    }

    /**
     * –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —ç–ª. –ø–æ—á—Ç–µ
     *
     * @param email —ç–ª. –ø–æ—á—Ç–∞
     * @return –∏–º—è, —Ñ–∞–º–∏–ª–∏—é –∏ –æ—Ç—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–±—É–µ–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public ResponseEntity<?> getUserByEmail(String email) {
        if (!userRepository.findByEmail(email).isPresent())
            return ResponseEntity
                    .status(HttpStatus.ACCEPTED)
                    .body("–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!");

        UserEntity rq = userRepository.findByEmail(email).get();
        RsInfoUser rs = new RsInfoUser()
                .setName(rq.getName())
                .setSurname(rq.getSurname())
                .setPatronymic(rq.getPatronymic());

        return ResponseEntity
                .status(HttpStatus.ACCEPTED)
                .body(rs);
    }

    /**
     * –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
     *
     * @param phone –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
     * @return –∏–º—è, —Ñ–∞–º–∏–ª–∏—é –∏ –æ—Ç—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–±—É–µ–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public ResponseEntity<?> getUserByPhone(String phone) {
        if (!userRepository.findByPhone(phone).isPresent())
            return ResponseEntity
                    .status(HttpStatus.ACCEPTED)
                    .body("–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!");

        UserEntity rq = userRepository.findByPhone(phone).get();
        RsInfoUser rs = new RsInfoUser()
                .setName(rq.getName())
                .setSurname(rq.getSurname())
                .setPatronymic(rq.getPatronymic());

        return ResponseEntity
                .status(HttpStatus.ACCEPTED)
                .body(rs);
    }

    //–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ id
    public Boolean validateUserByToken(String token) {
        Claims claims = jwtUtil.getClaims(token);
        Long id = claims.get("id", Long.class);
        return userRepository.findById(id).isPresent();
    }

    /**
     * –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –ø–∞—Ä–æ–ª—é
     *
     * @param phone –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
     * @param pass –ø–∞—Ä–æ–ª—å
     * @return –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—Ö–æ–¥–∞ –∏, –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞, –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
     */
    public ResponseEntity<?> login(String phone, String pass) {
        if (!userRepository.findByPhone(phone).isPresent()) {
            return ResponseEntity
                    .status(HttpStatus.NOT_FOUND)
                    .body("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!");
        }

        if (!userRepository.findByPhone(phone).get().getPassword().equals(pass)) {
            return ResponseEntity
                    .status(HttpStatus.BAD_REQUEST)
                    .body("–ü–∞—Ä–æ–ª—å –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω—ã");
        }

        Optional<UserEntity> tmpUser = userRepository.findByPhone(phone);


        Claims claims = Jwts.claims();
        claims.put("id", tmpUser.get().getId());
        claims.put("name", tmpUser.get().getName());
        claims.put("surname", tmpUser.get().getSurname());
        claims.put("patronymic", tmpUser.get().getPatronymic());
        claims.put("email", tmpUser.get().getEmail());
        claims.put("phone", tmpUser.get().getPhone());


        //TODO: –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—ã, –∫—Ä–µ–¥–∏—Ç—ã –∏ —Ç.–¥.
        String result = String.format("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, %s %s %s!\n" +
                "–í–∞—à–∞ —ç–ª. –ø–æ—á—Ç–∞: %s\n" +
                "–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: %s\n" +
                //"–í–∞—à–∏ –∫–∞—Ä—Ç—ã: \n" +
                "–í–∞—à –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω: ",
                tmpUser.get().getSurname(), tmpUser.get().getName(),
                tmpUser.get().getPatronymic(), tmpUser.get().getEmail(),
                phone) + jwtUtil.generateToken(claims);

        return ResponseEntity
                .status(HttpStatus.OK)
                .body(result);
    }
}
